import streamlit as st
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough
import tempfile
import os


st.set_page_config(
    page_title="Human-centered AI Language Technology",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="auto"
)

st.title("Human-centered AI Language Technology")

# Define sample text
sample_text = """nobis aegrus modi minima aut voluptatem. Necessitatibus aut nam quis porro et a. Interdum et malesuada fames ac ante ipsum primis in faucibus. Nullam pulvinar pellentesque. Nullam quis luctus diam, a feugiat enim. Aenean et tempor ante, non hendrerit tellus. Fusce finibus mauris ipsum, tincidunt semper turpis consectetur eget."""

# Sidebar configuration
with st.sidebar:
    st.title("Configuraci√≥n de Traducci√≥n")
    
    
    # LLM model selector
    llm_model = st.selectbox(
        "Selecciona el Modelo LLM",
        ["gpt-4o-mini", "gpt-3.5-turbo", "gpt-4o"]
    )
    
    # API Key input
    api_key = st.text_input("Ingresa tu API Key de OpenAI", type="password")
    
    # Temperature sliders
    st.subheader("Configuraci√≥n de Temperatura")
    temp_basic = st.slider("Temperatura del traductor basico", 0.0, 2.0, 0.7, 0.01)
    temp_agent_translator = st.slider("Temperatura del agente traductor", 0.0, 2.0, 0.7, 0.01)
    temp_agent_ple = st.slider("Temperatura de Plain Language Editor", 0.0, 2.0, 1.0, 0.01)
    temp_agent_quality = st.slider("Temperatura de Quality Estimator", 0.0, 2.0, 0.7, 0.01)

# Main area


# File uploader
uploaded_file = st.file_uploader("Subir archivo de texto (.txt)", type=["txt"], help="Limite 20MB per file + TXT")

# Text input area
if uploaded_file:
    input_text = uploaded_file.getvalue().decode("utf-8")
    st.text_area(
        "Texto de Entrada:",
        value=input_text,
        height=200,        
        placeholder="aqui saldra el texto que se ha subido"
    )

# Translation button
translate_button = st.button("boton para ejecutar la traduccion")

# Results area
if translate_button and input_text and api_key:
    # Initialize LLM models with different temperatures
    llm_basic_tranlator = ChatOpenAI(
        model=llm_model,
        temperature=temp_basic,
        api_key=api_key
    )
    
    llm_agent_translator = ChatOpenAI(
        model=llm_model,
        temperature=temp_agent_translator,
        api_key=api_key
    )
    
    llm_agent_plain_editor = ChatOpenAI(
        model=llm_model,
        temperature=temp_agent_ple,
        api_key=api_key
    )
    
    llm_agent_quality_estimator = ChatOpenAI(
        model=llm_model,
        temperature=temp_agent_quality,
        api_key=api_key
    )
    
    # Create LCEL chains
    # Basic LLM Translator (Agent B)
    basic_translator_prompt_template = ChatPromptTemplate.from_messages([
                        (
                            "system",
                            (
                                "Eres un agente de traducci√≥n autom√°tica. Tu tarea es traducir el siguiente texto al ingl√©s. Contesta siempre solo con la traducci√≥n, sin nigun comentario u observacion adicional."
                            )
                        ),
                        (
                            "human",
                            "Traduce el siguiente texto al ingl√©s: {text}. Debes mantener el significado original del texto. Devuelve como resultado solo la traducci√≥n, sin nigun comentario u observacion adicional."
                            
                        )
                    ])
    
    basic_translator_chain = basic_translator_prompt_template | llm_basic_tranlator | StrOutputParser()
    
    agent_translator_prompt_template = ChatPromptTemplate.from_messages([
                        (
                            "system",
                            (
                                "Act√∫a como un traductor m√©dico especializado con fluidez nativa en espa√±ol e ingl√©s. Tu tarea es convertir textos m√©dicos t√©cnicos del espa√±ol de Espa√±a (castellano) al ingl√©s estadounidense, manteniendo fidelidad sem√°ntica, tecnicismos y estructura original.\n\nInstrucciones Clave:\n\nPrecisi√≥n Terminol√≥gica: Usa equivalentes validados (Ej: \'hipertensi√≥n arterial\' ‚Üí \'hypertension\', \'taquicardia sinusal\' ‚Üí \'sinus tachycardia\').\n\nConservar Formatos: Mant√©n siglas (Ej: HTA ‚Üí HTN), c√≥digos CIE-10, valores num√©ricos (Ej: 160 mg/dL) y estructura del documento (secciones, vi√±etas).\n\nContexto Cl√≠nico: Prioriza equivalentes aceptados en literatura m√©dica angl√≥fona (Ej: \'edema maleolar\' ‚Üí \'ankle edema\', no \'swelling\').\n\nRegistros y Normas:\n\nMedicamentos: Conserva nombres cient√≠ficos (Ej: \'enalapril\' ‚Üí \'enalapril\', no marcas comerciales).\n\nFechas: Convierte formatos (Ej: \'15 de Octubre de 2023\' ‚Üí \'October 15, 2023\').\n\nAmbig√ºidades: Si un t√©rmino tiene m√∫ltiples traducciones (Ej: \'disnea\' ‚Üí \'dyspnea\' o \'shortness of breath\'), elige la opci√≥n m√°s frecuente en contextos formales.\n\nNotas Adicionales:\n\nEvita interpretaciones o res√∫menes.\n\nSe√±ala entre corchetes [ ] cualquier incertidumbre en la traducci√≥n. Contesta siempre solo con la traducci√≥n, sin nigun comentario u observacion adicional."
                            )
                        ),
                        (
                            "human",
                            "Traduce el siguiente informe m√©dico al ingl√©s, conservando todos los detalles t√©cnicos y estructura. Aqu√≠ el texto: {text}."
                            
                        )
                    ])
    
    agent_translator_chain= agent_translator_prompt_template | llm_agent_translator | StrOutputParser()
    
    # # Plain Language Editor
    agent_plain_editor_prompt_template = ChatPromptTemplate.from_messages([
                        (
                            "system",
                            (
                                "Act√∫a como un traductor m√©dico especializado con habilidades de adaptaci√≥n para p√∫blicos no expertos. Tu tarea es procesar textos m√©dicos. Recibiras dos textos. El primero es el texto original en castellano. El segundo es la traducci√≥n inicial al ingl√©s. Tu tarea es simplificar la traducci√≥n al ingl√©s para que sea comprensible para un p√∫blico general, manteniendo la fidelidad sem√°ntica y la informaci√≥n esencial.\n\nInstrucciones Clave:\n\nClaridad: Usa un lenguaje sencillo y directo, evitando tecnicismos y jerga m√©dica.\n\nEstructura: Organiza la informaci√≥n en p√°rrafos cortos y secuencias l√≥gicas.\n\nPrecisi√≥n: Conserva la informaci√≥n esencial y evita interpretaciones o res√∫menes.\n\nAdaptaci√≥n: Ajusta el tono y estilo para un p√∫blico no experto, sin perder la rigurosidad del contenido.\n\nNotas Adicionales:\n\nEvita a√±adir informaci√≥n nueva o modificar el contenido original.\n\nDevuelve solo la versi√≥n simplificada, sin nigun comentario u observacion adicional. Explica conceptos complejos sin alterar hechos (Ej: 'taquicardia sinusal' ‚Üí 'fast heartbeat originating from the heart‚Äôs natural pacemaker').\n\nSustituye latinismos por t√©rminos comunes (Ej: 'disnea' ‚Üí 'shortness of breath').\n\nMant√©n n√∫meros y c√≥digos, pero a√±ade contexto (Ej: 'LDL: 160 mg/dL' ‚Üí 'bad cholesterol level (160 mg/dL) ‚Äì above normal').\n\nUsa oraciones cortas y voz activa.\n\nProhibido:\n\nInterpretar diagn√≥sticos o a√±adir informaci√≥n no expl√≠cita.\n\nUsar met√°foras o lenguaje subjetivo.\n\nA√±adir informaci√≥n no presente en el texto original.\n\nContesta siempre solo con la versi√≥n simplificada, sin nigun comentario u observacion adicional."
                            )
                        ),
                        (
                            "human",
                            "Procesa este informe m√©dico siguiendo las instrucciones. Aqu√≠ el texto original en castellano: {original_text}. Y aqu√≠ la traducci√≥n inicial al ingl√©s: {translated_text}."
                            
                        )
                    ])
    
    agent_plain_editor_chain =  agent_plain_editor_prompt_template | llm_agent_plain_editor | StrOutputParser()
    
    # # Quality Estimator
    agent_quality_estimator_prompt_template = ChatPromptTemplate.from_messages([
                        (
                            "system",
                            (
                                """Act√∫a como un evaluador experto en traducci√≥n m√©dica biling√ºe (espa√±ol-ingl√©s). Tu tarea es analizar una versi√≥n simplificada en ingl√©s compar√°ndola con:
                                Texto original en espa√±ol
                                Traducci√≥n t√©cnica inicial
                                
                                Criterios de Evaluaci√≥n:
                                Exactitud (40%): ¬øLa simplificaci√≥n mantiene TODOS los hechos m√©dicos del original sin distorsiones?
                                
                                Claridad (30%): ¬øEl lenguaje es accesible pero t√©cnicamente correcto?
                                
                                Conservaci√≥n de Datos (20%): ¬øMantiene c√≥digos (CIE-10), valores num√©ricos y jerarqu√≠as?
                                
                                Errores Graves (10%): ¬øHay omisiones/adiciones no justificadas o t√©rminos mal adaptados?
                                
                                Instrucciones:
                                Penaliza con -15% por cada error factual o dato cr√≠tico alterado.
                                
                                Si el score final es <50%, considera la traducci√≥n como no confiable.
                                
                                Devuelve SOLO el porcentaje num√©rico (Ej: '82%') sin comentarios."""
                            )
                        ),
                        (
                            "human",
                            """
                            Eval√∫a esta traducci√≥n simplificada: {simplified_text}   
                            Texto original en espa√±ol: {original_text}
                            Traducci√≥n t√©cnica inicial: {translated_text}
                            Devuelve solo el score de credibilidad entre 0-100%
                            """
                            
                        )
                    ])
    
    agent_quality_estimator_chain = agent_quality_estimator_prompt_template | llm_agent_quality_estimator | StrOutputParser()
    
    # Execute translations with progress indicators
    with st.spinner("Ejecutando traducci√≥n b√°sica..."):
        basic_translation = basic_translator_chain.invoke(input_text)
    
    with st.spinner("Ejecutando el agente traductor..."):
        agent_translation = agent_translator_chain.invoke(input_text)

    with st.spinner("Ejecutando Plain Language Editor..."):
        simplified_translation = agent_plain_editor_chain.invoke({
            "original_text": input_text,
            "translated_text": agent_translation
        })

    with st.spinner("Ejecutando Quality Estimator..."):
        quality_score = agent_quality_estimator_chain.invoke({
            "original_text": input_text,
            "translated_text": agent_translation,
            "simplified_text": simplified_translation
        })

        print(quality_score)
        

        # Ensure the quality score is a number
    
    # with st.spinner("Evaluando calidad de traducci√≥n..."):
    #     quality_score = quality_chain.invoke({
    #         "original_text": input_text,
    #         "translated_text": classic_translation,
    #         "simplified_text": simplified_translation
    #     })
        # Ensure the quality score is a number
        # try:
        #     quality_score = float(quality_score.strip())
        #     quality_score_formatted = f"{quality_score:.4f}"
        # except ValueError:
        #     quality_score_formatted = "Error: No se pudo calcular la puntuaci√≥n"
    
    # Display results in two columns
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Traduccion fase 1")
        st.text_area(
            "Resultado:",
            value=basic_translation,
            height=600,
            placeholder="aqui saldra el resultado de la traduccion del agente B"
        )
    
    with col2:
        st.subheader("Traduccion final")
        st.text_area(
            "Agente traductor:",
            value=agent_translation,
            height=600)
        
    st.subheader("Plain Language Editor")
    st.text_area(
        "Resultado:",
        value=simplified_translation,
        height=600,
        placeholder="aqui saldra el resultado de la traduccion tras ser procesada por el Plan Language editor"
    )
                  
    st.subheader("Quality Estimator")
        
    st.metric("Puntuaci√≥n de Calidad", quality_score)

elif translate_button and not api_key:
    st.error("Por favor, ingresa tu API Key de OpenAI para continuar.")
elif translate_button and not input_text:
    st.warning("Por favor, sube un archivo o ingresa texto para traducir.")